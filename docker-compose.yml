services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - chokak-network

  kafka-1:
    image: wurstmeister/kafka:latest
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LOG_DIRS: /kafka-logs
      KAFKA_HOST_NAME: kafka-1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
    depends_on:
      - zookeeper-1
    volumes:
      - kafka-data:/kafka-logs
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - chokak-network

  postgres-1:
    image: postgres:15
    container_name: postgres-1
    ports:
      - "5430:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reviews_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - chokak-network

  chokak-cloud-storage:
    build:
      context: ./chokak-cloud-storage
      dockerfile: Dockerfile
    image: chokak-cloud-storage:latest
    container_name: chokak-cloud-storage
    ports:
      - "8088:8088"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8088"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - chokak-network

  chokak-gateway-server:
    build:
      context: ./chokak-gateway-server
      dockerfile: Dockerfile
    image: chokak-gateway-server:latest
    container_name: chokak-gateway-server
    ports:
      - "8000:8000"
    depends_on:
      - chokak-cloud-storage
      - chokak-server
      - external-service-example
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - chokak-network

  chokak-server:
    build:
      context: ./chokak-server
      dockerfile: Dockerfile
    image: chokak-server:latest
    container_name: chokak-server
    ports:
      - "8084:8084"
    depends_on:
      - postgres-1
      - chokak-cloud-storage
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8084"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - chokak-network

  external-service-example:
    build:
      context: ./external-service-example
      dockerfile: Dockerfile
    image: external-service-example:latest
    container_name: external-service-example
    ports:
      - "8100:8100"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8100"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - chokak-network
  
  telegram-bot:
    build:
      context: ./chokak-telegram-bot
      dockerfile: Dockerfile
    image: telegram-bot:latest
    container_name: telegram-bot
    depends_on:
      chokak-gateway-server:
        condition: service_healthy
    environment:
      API_TOKEN: ${API_TOKEN}
      API_URL: http://chokak-gateway-server:8000/
    networks:
      - chokak-network

  prometheus:
    image: 'prom/prometheus:latest'
    container_name: 'prometheus'
    restart: 'unless-stopped'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
    depends_on:
      - chokak-server

  grafana:
    image: 'grafana/grafana:latest'
    container_name: 'grafana'
    restart: 'unless-stopped'
    ports:
      - '3000:3000'
    environment:
      - 'GF_USERS_ALLOW_SIGN_UP=false'
    volumes:
      - './grafana/provisioning:/etc/grafana/provisioning'
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]

networks:
  chokak-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  prom_data: